### Health check
GET http://localhost:3000/health

### Login as alice
POST http://localhost:3000/auth/login
Content-Type: application/json

{
  "username": "alice",
  "password": "alice-password"
}

### Validate token (replace <token> with the JWT from login)
GET http://localhost:3000/auth/validate
Authorization: Bearer <token>

### Create new API key
POST http://localhost:3000/auth/apikey/create
Authorization: Bearer <token>

### List all API keys
GET http://localhost:3000/auth/apikeys
Authorization: Bearer <token>

### Delete an API key (replace <id> with the API key ID)
DELETE http://localhost:3000/auth/apikey/<id>
Authorization: Bearer <token>

### Create a new bucket
POST http://localhost:3000/buckets
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "my-bucket",
  "targetFTPfolder": "my-bucket-folder"
}

### List all buckets
GET http://localhost:3000/buckets
Authorization: Bearer <token>

### Create a new folder (virtual)
POST http://localhost:3000/folders
Authorization: Bearer <token>
Content-Type: application/json

{
  "name": "my-folder",
  "bucketId": 1
}

### List all folders
GET http://localhost:3000/folders
Authorization: Bearer <token>

### Create a new file (upload)
POST http://localhost:3000/files
Authorization: Bearer <token>
Content-Type: multipart/form-data

# Use your HTTP client to attach a file field named 'file' and fields:
# bucketId: 1
# targetFTPfolder: my-bucket-folder

### List all files
GET http://localhost:3000/files
Authorization: Bearer <token>

### Download a file (replace <id> with file ID)
GET http://localhost:3000/files/<id>/download
Authorization: Bearer <token>

### Delete a file (replace <id> with file ID)
DELETE http://localhost:3000/files/<id>
Authorization: Bearer <token>
